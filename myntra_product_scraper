#note run this after running the first scraper,this scrapes all the link that are generated by the first scraper
import scrapy
import csv


class MyntraProductScraper(scrapy.Spider):
    name = "myntra_product_scraper"

    def start_requests(self):
        filename = "myntra_products_list.csv"  # Specify the CSV file name

        # Read the product details from the CSV file into a list of dictionaries
        with open(filename, mode="r") as file:
            reader = csv.DictReader(file)
            for row in reader:
                product_link = row.get("product_link")
                _uuid = row.get('uuid')
                category = row.get("category")
                product_ranking = row.get("product_ranking")
                page = row.get("page")
                page_url = row.get("page_url")
                yield scrapy.Request(url=product_link, callback=self.parse, meta={
                    "category": category,
                    "product_ranking": product_ranking,
                    "page": page,
                    "uuid": _uuid,
                    "page_url": page_url,
                    "zyte_api_automap": {
                        "browserHtml": True,
                        "actions": [
                            {
                                "action": "scrollBottom",
                            }
                        ],
                    },
                })

    def parse(self, response):
        product_link = response.url
        brand_name = response.css("h1.pdp-title::text").get()
        seller_name = response.css(
            "span.supplier-productSellerName::text").get()
        modal_seller_name = response.css(
            "h3.grievance-modifier::text").get()
        description = response.css("h1.pdp-name::text").get()
        rating = response.css("div.index-overallRating div::text").getall()[0]
        total_rating = response.css("div.index-ratingsCount::text").get()
        seller_information = response.css(
            "span.supplier-productSellerName::text").get()
        product_code = response.css("span.supplier-styleId::text").get()
        category = response.meta.get("category")
        product_ranking = response.meta.get("product_ranking")
        page = response.meta.get("page")
        _uuid = response.meta.get("uuid")
        page_url = response.meta.get("page_url")

        yield {
            "product_link": product_link,
            "brand_name": brand_name,
            "seller_name": seller_name,
            "description": description,
            "rating": rating,
            "total_rating": total_rating,
            "seller_information": seller_information,
            "product_code": product_code,
            "category": category,
            "product_ranking": product_ranking,
            "page": page,
            "uuid": _uuid,
            "page_url": page_url,
            "modal_seller_name": modal_seller_name
        }
